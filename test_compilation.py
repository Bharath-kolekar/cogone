#!/usr/bin/env python3
"""Test compilation and functionality of Zero Assumption DNA"""

print("=" * 80)
print("TESTING ZERO ASSUMPTION DNA COMPILATION & FUNCTIONALITY")
print("=" * 80)
print()

# Test 1: Import base module
print("Test 1: Importing base Zero Assumption DNA...")
try:
    from backend.app.services.zero_assumption_dna import (
        ZeroAssumptionDNA,
        AssumptionViolation,
        must_exist,
        must_be_type,
        must_not_be_empty
    )
    print("‚úÖ Base module imports successfully")
except Exception as e:
    print(f"‚ùå Base module import failed: {e}")
    exit(1)

# Test 2: Import rules module
print("\nTest 2: Importing comprehensive rules...")
try:
    from backend.app.services.zero_assumption_dna_rules import (
        ComprehensiveZeroAssumptionRules,
        comprehensive_zero_assumption,
        RuleCategory
    )
    print("‚úÖ Rules module imports successfully")
except Exception as e:
    print(f"‚ùå Rules module import failed: {e}")
    exit(1)

# Test 3: Test basic validation (should pass)
print("\nTest 3: Testing basic validations (should pass)...")
try:
    result = must_exist("test", "test_value")
    assert result == "test"
    print("‚úÖ must_exist works")
    
    result = must_be_type(123, int, "test_int")
    assert result == 123
    print("‚úÖ must_be_type works")
    
    result = must_not_be_empty("test", "test_string")
    assert result == "test"
    print("‚úÖ must_not_be_empty works")
except Exception as e:
    print(f"‚ùå Basic validation failed: {e}")
    exit(1)

# Test 4: Test violations (should raise)
print("\nTest 4: Testing violations (should raise errors)...")
try:
    must_exist(None, "test_value")
    print("‚ùå Should have raised AssumptionViolation for None")
    exit(1)
except AssumptionViolation as e:
    print(f"‚úÖ Correctly raised: {str(e)[:60]}...")

# Test 5: Test email validation
print("\nTest 5: Testing email validation...")
try:
    # Valid email
    email = comprehensive_zero_assumption.verify_email_format(
        "user@example.com",
        "test_email"
    )
    assert email == "user@example.com"
    print("‚úÖ Valid email accepted")
    
    # Invalid email
    try:
        comprehensive_zero_assumption.verify_email_format(
            "invalid-email",
            "test_email"
        )
        print("‚ùå Should have raised AssumptionViolation for invalid email")
        exit(1)
    except AssumptionViolation:
        print("‚úÖ Invalid email correctly rejected")
        
except Exception as e:
    print(f"‚ùå Email validation failed: {e}")
    exit(1)

# Test 6: Test URL validation
print("\nTest 6: Testing URL validation...")
try:
    url = comprehensive_zero_assumption.verify_url_format(
        "https://example.com",
        "test_url"
    )
    assert url == "https://example.com"
    print("‚úÖ Valid URL accepted")
    
    try:
        comprehensive_zero_assumption.verify_url_format(
            "not-a-url",
            "test_url"
        )
        print("‚ùå Should have raised AssumptionViolation for invalid URL")
        exit(1)
    except AssumptionViolation:
        print("‚úÖ Invalid URL correctly rejected")
        
except Exception as e:
    print(f"‚ùå URL validation failed: {e}")
    exit(1)

# Test 7: Test SQL injection detection
print("\nTest 7: Testing SQL injection detection...")
try:
    # Safe input
    safe = comprehensive_zero_assumption.verify_no_sql_injection(
        "John Doe",
        "username"
    )
    print("‚úÖ Safe input accepted")
    
    # SQL injection attempt
    try:
        comprehensive_zero_assumption.verify_no_sql_injection(
            "1' OR '1'='1",
            "username"
        )
        print("‚ùå Should have raised AssumptionViolation for SQL injection")
        exit(1)
    except AssumptionViolation:
        print("‚úÖ SQL injection attempt correctly blocked")
        
except Exception as e:
    print(f"‚ùå SQL injection detection failed: {e}")
    exit(1)

# Test 8: Test password strength
print("\nTest 8: Testing password strength validation...")
try:
    # Strong password
    pwd = comprehensive_zero_assumption.verify_password_strength(
        "SecurePass123",
        "password",
        min_length=8
    )
    print("‚úÖ Strong password accepted")
    
    # Weak password
    try:
        comprehensive_zero_assumption.verify_password_strength(
            "weak",
            "password",
            min_length=8
        )
        print("‚ùå Should have raised AssumptionViolation for weak password")
        exit(1)
    except AssumptionViolation:
        print("‚úÖ Weak password correctly rejected")
        
except Exception as e:
    print(f"‚ùå Password validation failed: {e}")
    exit(1)

# Test 9: Test UUID validation
print("\nTest 9: Testing UUID validation...")
try:
    uuid = comprehensive_zero_assumption.verify_uuid_format(
        "123e4567-e89b-12d3-a456-426614174000",
        "test_uuid"
    )
    print("‚úÖ Valid UUID accepted")
    
    try:
        comprehensive_zero_assumption.verify_uuid_format(
            "not-a-uuid",
            "test_uuid"
        )
        print("‚ùå Should have raised AssumptionViolation for invalid UUID")
        exit(1)
    except AssumptionViolation:
        print("‚úÖ Invalid UUID correctly rejected")
        
except Exception as e:
    print(f"‚ùå UUID validation failed: {e}")
    exit(1)

# Test 10: Get comprehensive report
print("\nTest 10: Getting comprehensive report...")
try:
    report = comprehensive_zero_assumption.get_comprehensive_report()
    print(f"‚úÖ Report generated successfully")
    print(f"   - Rules applied: {report['rules_applied']}")
    print(f"   - Total enforcements: {report['total_enforcements']}")
    print(f"   - Violations caught: {report['total_violations']}")
except Exception as e:
    print(f"‚ùå Report generation failed: {e}")
    exit(1)

# Success!
print()
print("=" * 80)
print("‚úÖ ALL TESTS PASSED - ZERO ASSUMPTION DNA WORKING PERFECTLY!")
print("=" * 80)
print()
print("Summary:")
print("  ‚úÖ Base module compiles")
print("  ‚úÖ Rules module compiles")
print("  ‚úÖ All validations work")
print("  ‚úÖ Violations properly raised")
print("  ‚úÖ Email validation works")
print("  ‚úÖ URL validation works")
print("  ‚úÖ SQL injection detection works")
print("  ‚úÖ Password validation works")
print("  ‚úÖ UUID validation works")
print("  ‚úÖ Reporting works")
print()
print("Zero Assumption DNA is PRODUCTION READY! üéâ")

