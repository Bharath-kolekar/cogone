name: Smoke Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  smoke-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: voice_to_app_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Run backend tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/voice_to_app_test
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key
        JWT_SECRET: test-jwt-secret
        ENCRYPTION_KEY: test-encryption-key
        DEBUG: true
        ENVIRONMENT: test
      run: |
        cd backend
        pytest tests/ -v --tb=short

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Build backend Docker image
      run: |
        cd backend
        docker build -t voice-to-app-backend:test .

    - name: Build frontend Docker image
      run: |
        cd frontend
        docker build -t voice-to-app-frontend:test .

    - name: Run integration tests
      run: |
        docker-compose -f infra/docker-compose.dev.yml up -d
        sleep 30
        # Run integration tests here
        docker-compose -f infra/docker-compose.dev.yml down

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml,./frontend/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false