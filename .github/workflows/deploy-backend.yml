name: Deploy Backend to Railway/Render

on:
  push:
    branches:
      - main
      - production
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
      - 'railway.json'
      - 'render.yaml'
  pull_request:
    branches:
      - main
    paths:
      - 'backend/**'

env:
  PYTHON_VERSION: '3.11'
  ZERO_COST_MODE: 'true'

jobs:
  # Run tests before deployment
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov
      
      - name: Run linting
        run: |
          cd backend
          pip install flake8 black
          flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
          black app --check
        continue-on-error: true
      
      - name: Run tests
        run: |
          cd backend
          pytest tests/ -v --cov=app --cov-report=term-missing
        continue-on-error: true
      
      - name: Check imports
        run: |
          cd backend
          python -c "from app.main import app; print('âœ… Main app imports successfully')"

  # Deploy to Railway (Primary)
  deploy-railway:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Railway CLI
        run: |
          npm install -g @railway/cli
      
      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          railway up --service cognomega-backend
      
      - name: Verify deployment
        run: |
          echo "âœ… Backend deployed to Railway"
          echo "Check status at: https://railway.app/project/${{ secrets.RAILWAY_PROJECT_ID }}"

  # Deploy to Render (Backup/Alternative)
  deploy-render:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": false}'
      
      - name: Verify deployment
        run: |
          echo "âœ… Backend deployed to Render"
          echo "Check status at: https://dashboard.render.com"

  # Health check after deployment
  health-check:
    needs: [deploy-railway]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Wait for deployment
        run: sleep 30
      
      - name: Check backend health
        run: |
          curl -f ${{ secrets.BACKEND_URL }}/health || exit 1
          echo "âœ… Backend health check passed"
      
      - name: Check API endpoints
        run: |
          curl -f ${{ secrets.BACKEND_URL }}/docs || exit 1
          echo "âœ… API documentation accessible"
      
      - name: Notify deployment success
        if: success()
        run: |
          echo "ðŸŽ‰ Deployment successful!"
          echo "Backend: ${{ secrets.BACKEND_URL }}"
          echo "Docs: ${{ secrets.BACKEND_URL }}/docs"
